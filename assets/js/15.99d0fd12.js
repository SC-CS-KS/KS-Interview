(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{259:function(v,_,a){"use strict";a.r(_);var r=a(28),t=Object(r.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"mysql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql"}},[v._v("#")]),v._v(" MySQL")]),v._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#mysql"}},[v._v("MySQL")]),v._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E6%95%B0%E6%8D%AE%E5%B8%B8%E7%94%A8%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F"}},[v._v("数据常用存储方式？")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%8B%E5%8A%A1%E6%9C%89%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E6%89%8B%E5%8A%A8%E6%8F%90%E4%BA%A4%E5%AE%B9%E6%98%93%E5%BF%98%E8%AE%B0java%E4%BB%A3%E7%A0%81%E4%BD%BF%E7%94%A8%E4%BB%80%E4%B9%88%E6%96%B9%E5%BC%8F%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4commit"}},[v._v("事务有时候需要手动提交，容易忘记，Java代码使用什么方式可以实现自动提交（commit）？")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#mysql%E5%A6%82%E6%9E%9C%E4%B8%80%E4%B8%AA%E4%BA%8B%E5%8A%A1%E4%B8%80%E7%9B%B4%E6%B2%A1%E6%9C%89commit%E5%B9%B6%E4%B8%94%E4%B9%9F%E6%B2%A1%E6%9C%89rollback%E4%BC%9A%E6%80%8E%E6%A0%B7"}},[v._v("Mysql如果一个事务一直没有commit并且也没有rollback会怎样？")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E7%B4%A2%E5%BC%95%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86"}},[v._v("索引实现原理？")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E8%A6%81%E9%80%89%E7%94%A8b%E6%A0%91%E8%BF%99%E6%A0%B7%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84"}},[v._v("文件存储要选用B 树这样的数据结构？")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E5%8F%96b%E6%A0%91"}},[v._v("MySQL为什么选取B 树?")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E6%80%8E%E6%A0%B7%E5%AE%9E%E7%8E%B0%E6%9C%89%E6%9D%A1%E4%BB%B6%E7%9A%84%E7%B4%A2%E5%BC%95"}},[v._v("怎样实现有条件的索引?")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E6%80%8E%E6%A0%B7%E5%9C%A8-mysql-%E8%A1%A8%E4%B8%AD%E5%AD%98%E5%82%A8%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%E6%95%B0%E6%8D%AE"}},[v._v("怎样在 MySQL 表中存储树形结构数据？")])])])])]),v._v(" "),a("h2",{attrs:{id:"数据常用存储方式？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据常用存储方式？"}},[v._v("#")]),v._v(" 数据常用存储方式？")]),v._v(" "),a("p",[v._v("顺序存储和链式存储")]),v._v(" "),a("h2",{attrs:{id:"mysql-主从复制原理的是什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-主从复制原理的是什么？"}},[v._v("#")]),v._v(" MySQL 主从复制原理的是什么？")]),v._v(" "),a("p",[v._v("MySQL主从复制涉及到三个线程，一个运行在主节点（log dump thread），其余两个(I/O thread, SQL thread)运行在从节点。")]),v._v(" "),a("ul",[a("li",[v._v("主节点 binary log dump 线程")])]),v._v(" "),a("p",[v._v("当从节点连接主节点时，主节点会为其创建一个log dump 线程，用于发送和读取bin-log的内容。\n在读取bin-log中的操作时，log dump线程会对主节点上的bin-log加锁，当读取完成，在发送给从节点之前，锁会被释放。"),a("br"),v._v("\n主节点会为自己的每一个从节点创建一个log dump 线程。")]),v._v(" "),a("ul",[a("li",[v._v("从节点I/O线程")])]),v._v(" "),a("p",[v._v("用来连接主节点，请求主库中更新的bin-log。"),a("br"),v._v("\nI/O线程接收到主节点的blog dump进程发来的更新之后，保存在本地relay-log（中继日志）中。")]),v._v(" "),a("ul",[a("li",[v._v("从节点SQL线程")])]),v._v(" "),a("p",[v._v("负责读取relay log中的内容，解析成具体的操作并执行，最终保证主从数据的一致性。")]),v._v(" "),a("h2",{attrs:{id:"mysql-主从复制主要用途"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-主从复制主要用途"}},[v._v("#")]),v._v(" MySQL 主从复制主要用途?")]),v._v(" "),a("ol",[a("li",[v._v("主从切换 如果主库出现问题，可以快速切换到从库提供服务。")]),v._v(" "),a("li",[v._v("读写分离 可以在从库执行查询操作，降低主库的访问压力。")]),v._v(" "),a("li",[v._v("数据备份 可以在从库进行备份，以免备份期间影响主库的服务。")])]),v._v(" "),a("h2",{attrs:{id:"mysql-主从复制的模式有哪些？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-主从复制的模式有哪些？"}},[v._v("#")]),v._v(" MySQL 主从复制的模式有哪些？")]),v._v(" "),a("ul",[a("li",[v._v("异步模式")])]),v._v(" "),a("p",[v._v("MySQL 默认采用异步复制方式。"),a("br"),v._v("\n主节点不会主动推送bin-log到从节点，主库在执行完客户端提交的事务后会立即将结果返给给客户端，并不关心从库是否已经接收并处理。")]),v._v(" "),a("ul",[a("li",[v._v("半同步模式")])]),v._v(" "),a("p",[v._v("介于异步复制和全同步复制之间，主库在执行完客户端提交的事务后不是立刻返回给客户端。"),a("br"),v._v("\n而是等待至少一个从库接收到并写到relay-log中才返回成功信息给客户端。")]),v._v(" "),a("p",[v._v("相对于异步复制，半同步复制提高了数据的安全性，一定程度的保证了数据能成功备份到从库，"),a("br"),v._v("\n同时它也造成了一定程度的延迟，半同步复制最好在低延时的网络中使用。")]),v._v(" "),a("ul",[a("li",[v._v("全同步模式")])]),v._v(" "),a("p",[v._v("指当主库执行完一个事务，然后所有的从库都复制了该事务并成功执行完才返回成功信息给客户端。")]),v._v(" "),a("ul",[a("li",[v._v("GTID复制模式")])]),v._v(" "),a("p",[v._v("基于GTID的复制是MySQL 5.6后新增的复制方式。"),a("br"),v._v("\nGTID (global transaction identifier) 即全局事务ID，保证了在每个在主库上提交的事务在集群中有一个唯一的ID。")]),v._v(" "),a("p",[v._v("通过全局的事务ID确定从库要执行的事务的方式代替了以前需要用bin-log和pos点确定从库要执行的事务的方式。")]),v._v(" "),a("h2",{attrs:{id:"mysql-主从复制的方式有哪些？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-主从复制的方式有哪些？"}},[v._v("#")]),v._v(" MySQL 主从复制的方式有哪些？")]),v._v(" "),a("ul",[a("li",[v._v("基于SQL语句的复制")])]),v._v(" "),a("p",[v._v("只需要记录会修改数据的sql语句到bin-log中，减少了bin-log日质量，节约I/O，提高性能。"),a("br"),v._v("\n缺点是在某些情况下，会导致主从节点中数据不一致（比如sleep(),now()等）。")]),v._v(" "),a("ul",[a("li",[v._v("基于行的复制")])]),v._v(" "),a("p",[v._v("只记录哪条数据被修改了，修改成什么样。"),a("br"),v._v("\n优点是不会出现某些特定情况下的存储过程、或者函数、或者trigger的调用或者触发无法被正确复制的问题。"),a("br"),v._v("\n缺点是会产生大量的日志，尤其是修改table的时候会让日志暴增，同时增加bin-log同步时间。"),a("br"),v._v("\n也不能通过bin-log解析获取执行过的sql语句，只能看到发生的data变更。")]),v._v(" "),a("ul",[a("li",[v._v("混合模式复制")])]),v._v(" "),a("p",[v._v("是以上两种模式的混合，"),a("br"),v._v("\n对于一般的复制使用STATEMENT模式保存到bin-log。"),a("br"),v._v("\n对于STATEMENT模式无法复制的操作则使用ROW模式来保存，MySQL会根据执行的SQL语句选择日志保存方式。")]),v._v(" "),a("p",[v._v("对应的bin-log文件的格式也有三种：STATEMENT,  ROW,  MIXED。")]),v._v(" "),a("h2",{attrs:{id:"mysql-主从同步延时的解决方案？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-主从同步延时的解决方案？"}},[v._v("#")]),v._v(" MySQL 主从同步延时的解决方案？")]),v._v(" "),a("p",[v._v("判断主从延时，通常有两个方法：")]),v._v(" "),a("ol",[a("li",[v._v("Seconds_Behind_Master")]),v._v(" "),a("li",[v._v("mk-heartbeat  Maatkit万能工具包中的一个工具，被认为可以准确判断复制延时的方法。")])]),v._v(" "),a("p",[v._v("造成延迟的可能因素：")]),v._v(" "),a("ol",[a("li",[v._v("网络延迟")]),v._v(" "),a("li",[v._v("master负载")]),v._v(" "),a("li",[v._v("slave负载")])]),v._v(" "),a("p",[v._v("解决方案：")]),v._v(" "),a("ol",[a("li",[v._v("使用多台slave来分摊读请求，再从这些slave中取一台专用的服务器，只作为备份用，不进行其他任何操作，"),a("br"),v._v("\n执行relay log 里面的SQL效率自然就高了，能相对最大限度地达到'实时'的要求了。")]),v._v(" "),a("li",[v._v("开启MySQL的 Semi-sync（半同步），还是会存在延迟，是一种折中方案。")]),v._v(" "),a("li",[v._v("对于强一致场景，完全同步，但完全同步是一个非常昂贵和复杂的操作，负载量大的话几乎不可能完成。")]),v._v(" "),a("li",[v._v("不在主从架构上解决该问题，基于业务场景来解决"),a("br"),v._v("\n如：分布式缓存")])]),v._v(" "),a("h2",{attrs:{id:"事务有时候需要手动提交，容易忘记，java代码使用什么方式可以实现自动提交（commit）？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务有时候需要手动提交，容易忘记，java代码使用什么方式可以实现自动提交（commit）？"}},[v._v("#")]),v._v(" 事务有时候需要手动提交，容易忘记，Java代码使用什么方式可以实现自动提交（commit）？")]),v._v(" "),a("p",[v._v("try-with-resource。")]),v._v(" "),a("h2",{attrs:{id:"mysql如果一个事务一直没有commit并且也没有rollback会怎样？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql如果一个事务一直没有commit并且也没有rollback会怎样？"}},[v._v("#")]),v._v(" Mysql如果一个事务一直没有commit并且也没有rollback会怎样？")]),v._v(" "),a("p",[v._v("断开链接会自动rollback，死锁或者这个锁超时的时候，也会rollback。")]),v._v(" "),a("h2",{attrs:{id:"索引实现原理？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引实现原理？"}},[v._v("#")]),v._v(" 索引实现原理？")]),v._v(" "),a("ul",[a("li",[v._v("B+树")])]),v._v(" "),a("h2",{attrs:{id:"文件存储要选用b-树这样的数据结构？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件存储要选用b-树这样的数据结构？"}},[v._v("#")]),v._v(" 文件存储要选用B+树这样的数据结构？")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("B+  tree 的磁盘读写代价更低"),a("br"),v._v("\n内部结点并没有指向关键字具体信息的指针，因此其内部结点相对B 树更小。"),a("br"),v._v("\n如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。"),a("br"),v._v("\n一次性读入内存中的需要查找的关键字也就越多，相对来说IO读写次数也就降低了。")])]),v._v(" "),a("li",[a("p",[v._v("B+ tree 的查询效率更加稳定"),a("br"),v._v("\n由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引，"),a("br"),v._v("\n所以任何关键字的查找必须走一条从根结点到叶子结点的路，"),a("br"),v._v("\n所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。")])])]),v._v(" "),a("h2",{attrs:{id:"mysql为什么选取b-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql为什么选取b-树"}},[v._v("#")]),v._v(" MySQL为什么选取B+树?")]),v._v(" "),a("p",[v._v("本质上是因为MySQL数据是存放在外部存储的"),a("br"),v._v("\nB+树是为磁盘或其他直接存取的辅助存储设备而设计的一种数据结构。")]),v._v(" "),a("p",[v._v("能够提供稳定高效的范围扫描（range-query）功能"),a("br"),v._v("\n这也是为什么数据库和操作系统中的文件系统通常会采用b+树作为数据索引的原因"),a("br"),v._v("\n这个特点主要因为所有叶子节点相互连接，并且叶子节点本身依关键字的大小自小而大顺序链接。")]),v._v(" "),a("h2",{attrs:{id:"怎样实现有条件的索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎样实现有条件的索引"}},[v._v("#")]),v._v(" 怎样实现有条件的索引?")]),v._v(" "),a("p",[v._v("例如："),a("br"),v._v("\n有A、B两列，B为一个状态列取值 0 和1，要求当B = 1时，AB为唯一索引，而等于 0 时，可以任意存储。")]),v._v(" "),a("h2",{attrs:{id:"怎样在-mysql-表中存储树形结构数据？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎样在-mysql-表中存储树形结构数据？"}},[v._v("#")]),v._v(" 怎样在 MySQL 表中存储树形结构数据？")]),v._v(" "),a("ol",[a("li",[v._v("Adjacency List：每一条记录存parent_id。")]),v._v(" "),a("li",[v._v("Path Enumerations：每一条记录存整个tree path经过的node枚举。")]),v._v(" "),a("li",[v._v("Nested Sets：每一条记录存 nleft 和 nright。")]),v._v(" "),a("li",[v._v("Closure Table：维护一个表，所有的 tree path 作为记录进行保存。")])]),v._v(" "),a("h2",{attrs:{id:"为什么要分库分表？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要分库分表？"}},[v._v("#")]),v._v(" 为什么要分库分表？")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("分表"),a("br"),v._v("\n单表数据量太大，会极大地影响 sql 执行的性能。"),a("br"),v._v("\n一般来说，单表到几百万的时候，性能就会相对差一些了，就要考虑分表了。")])]),v._v(" "),a("li",[a("p",[v._v("分库"),a("br"),v._v("\n一般而言，一个库最多支撑 2000 左右并发，超过一定要扩容了，"),a("br"),v._v("\n一个健康的单库并发值最好保持在每秒 1000 左右。")])])]),v._v(" "),a("p",[v._v("主要考虑："),a("br"),v._v("\n并发支撑情况、磁盘使用情况、SQL 执行性能。")]),v._v(" "),a("h2",{attrs:{id:"用过哪些分库分表中间件？不同的分库分表中间件都有什么优点和缺点？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用过哪些分库分表中间件？不同的分库分表中间件都有什么优点和缺点？"}},[v._v("#")]),v._v(" 用过哪些分库分表中间件？不同的分库分表中间件都有什么优点和缺点？")]),v._v(" "),a("p",[v._v("原理：根据指定的某个字段值，比如说 userid，自动路由到对应的库上去，然后再自动路由到对应的表里去。")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("Cobar"),a("br"),v._v("\n阿里 b2b 团队开发和开源的，属于 proxy 层方案，介于应用服务器和数据库服务器之间。")])]),v._v(" "),a("li",[a("p",[v._v("TDDL"),a("br"),v._v("\n淘宝团队开发的，属于 client 层方案。")])]),v._v(" "),a("li",[a("p",[v._v("Atlas"),a("br"),v._v("\n360 开源的，属于 proxy 层方案。")])]),v._v(" "),a("li",[a("p",[v._v("Sharding-jdbc"),a("br"),v._v("\n当当开源的，属于 client 层方案。")])]),v._v(" "),a("li",[a("p",[v._v("Mycat")])])]),v._v(" "),a("p",[v._v("基于 Cobar 改造的，属于 proxy 层方案，支持的功能非常完善，"),a("br"),v._v("\n而且目前应该是非常火的而且不断流行的数据库中间件，社区很活跃。")]),v._v(" "),a("ul",[a("li",[v._v("总结")])]),v._v(" "),a("p",[v._v("可以考虑使用 Sharding-jdbc  和 Mycat。")]),v._v(" "),a("p",[v._v("Sharding-jdbc 这种 client 层方案的优点在于 不用部署，运维成本低，不需要代理层的二次转发请求，性能很高。"),a("br"),v._v("\n但是个系统都需要耦合 Sharding-jdbc 的依赖。（中小型公司）")]),v._v(" "),a("p",[v._v("Mycat 这种 proxy 层方案的缺点在于需要部署，自己运维一套中间件，运维成本高，"),a("br"),v._v("\n但是好处在于对于各个项目是透明的。（中大型公司，支撑的业务多，可单独维护）")]),v._v(" "),a("h2",{attrs:{id:"如何对数据库做拆分？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何对数据库做拆分？"}},[v._v("#")]),v._v(" 如何对数据库做拆分？")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("水平拆分"),a("br"),v._v("\n每个库的表结构都一样，只不过每个库表放的数据是不同的，所有库表的数据加起来就是全量数据。"),a("br"),v._v("\n水平拆分的意义，就是将数据均匀放更多的库里，然后用多个库来扛更高的并发，还有就是用多个库的存储容量来进行扩容。")])]),v._v(" "),a("li",[a("ul",[a("li",[v._v("按照 range 来分"),a("br"),v._v("\n一般是按时间范围，好处在于扩容的时候很简单，按照时间新建表即可。"),a("br"),v._v("\n实际生产用 range，要看场景。")])])]),v._v(" "),a("li",[a("ul",[a("li",[v._v("hash 分发"),a("br"),v._v("\n可以平均分配每个库的数据量和请求压力，扩容起来比较麻烦，会有一个数据迁移的过程。")])])]),v._v(" "),a("li",[a("p",[v._v("垂直拆分"),a("br"),v._v("\n把一个有很多字段的表给拆分到多个表中，或者是多个库上去。"),a("br"),v._v("\n例如： 把一个大表拆开，订单表、订单支付表、订单商品表。")])])]),v._v(" "),a("p",[v._v("一般来说，会将较少的访问频率很高的字段放到一个表里去，然后将较多的访问频率很低的字段放到另外一个表里去。"),a("br"),v._v("\n因为数据库是有缓存的，你访问频率高的行字段越少，就可以在缓存里缓存更多的行，性能就越好。")]),v._v(" "),a("h2",{attrs:{id:"分库分表如何平滑过渡？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分库分表如何平滑过渡？"}},[v._v("#")]),v._v(" 分库分表如何平滑过渡？")]),v._v(" "),a("ul",[a("li",[v._v("停机迁移方案")]),v._v(" "),a("li",[v._v("双写迁移方案")])]),v._v(" "),a("h2",{attrs:{id:"分库分表之后，id-主键如何处理？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分库分表之后，id-主键如何处理？"}},[v._v("#")]),v._v(" 分库分表之后，id 主键如何处理？")]),v._v(" "),a("p",[v._v("实际上就是实现分布式唯一ID。")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("数据库自增 id"),a("br"),v._v("\n往一个库的一个表里插入一条没什么业务含义的数据，然后获取一个数据库自增的一个 id。"),a("br"),v._v("\n拿到这个 id 之后再往对应的分库分表里去写入。")])]),v._v(" "),a("li",[a("p",[v._v("设置数据库 sequence 或者表自增字段步长")])]),v._v(" "),a("li",[a("p",[v._v("UUID")])]),v._v(" "),a("li",[a("p",[v._v("snowflake 算法")])])]),v._v(" "),a("h2",{attrs:{id:"mysql-的查询效率影响因素？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-的查询效率影响因素？"}},[v._v("#")]),v._v(" MySQL 的查询效率影响因素？")]),v._v(" "),a("p",[a("a",{attrs:{href:"http://112.126.103.179/archives/mysql-query-influencing-factors",target:"_blank",rel:"noopener noreferrer"}},[v._v("参考"),a("OutboundLink")],1)]),v._v(" "),a("h2",{attrs:{id:"mysql-性能优化思路？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-性能优化思路？"}},[v._v("#")]),v._v(" MySQL 性能优化思路？")]),v._v(" "),a("ul",[a("li",[v._v("读写分离")]),v._v(" "),a("li",[v._v("水平分表")]),v._v(" "),a("li",[v._v("分库")]),v._v(" "),a("li",[v._v("垂直分表")]),v._v(" "),a("li",[v._v("引入Cache")])]),v._v(" "),a("h2",{attrs:{id:"如何实现-mysql-的读写分离？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现-mysql-的读写分离？"}},[v._v("#")]),v._v(" 如何实现 MySQL 的读写分离？")]),v._v(" "),a("p",[v._v("基于MySQL的主从复制机制。")]),v._v(" "),a("p",[v._v("注意点："),a("br"),v._v("\n会存在主从复制延迟，导致数据不一致情况。"),a("br"),v._v("\n所以对于实时性要求高的场景，是不能采用异步主从复制来实现读写分离的。")]),v._v(" "),a("ul",[a("li",[v._v("基于程序代码内部实现")])]),v._v(" "),a("p",[v._v("在代码中根据select,insert进行路由分类。")]),v._v(" "),a("ul",[a("li",[v._v("基于中间代理层实现")])]),v._v(" "),a("h2",{attrs:{id:"如何解决mysql主库宕机导致的数据丢失情况？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何解决mysql主库宕机导致的数据丢失情况？"}},[v._v("#")]),v._v(" 如何解决MySQL主库宕机导致的数据丢失情况？")]),v._v(" "),a("p",[v._v("一般是 MySQL 异步复制导致，可以采用半同步复制模式。")])])}),[],!1,null,null,null);_.default=t.exports}}]);