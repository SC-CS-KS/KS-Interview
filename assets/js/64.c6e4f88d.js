(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{305:function(a,t,r){"use strict";r.r(t);var e=r(28),s=Object(e.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"oop"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#oop"}},[a._v("#")]),a._v(" OOP")]),a._v(" "),r("h2",{attrs:{id:"三大特征"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三大特征"}},[a._v("#")]),a._v(" 三大特征")]),a._v(" "),r("p",[a._v("封装、继承、多态。")]),a._v(" "),r("p",[a._v("多态，指的就是父类引用指向子类对象，调用方法时会调用子类的实现而不是父类的实现。"),r("br"),a._v("\n多态的实现的关键在于“动态绑定”。")]),a._v(" "),r("h2",{attrs:{id:"override-overload的含义与区别？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#override-overload的含义与区别？"}},[a._v("#")]),a._v(" Override, Overload的含义与区别？")]),a._v(" "),r("p",[a._v("Override表示“重写”，是子类对父类中同一方法的重新定义，\nOverload表示“重载”，也就是定义一个与已定义方法名称相同但签名不同的新方法。")]),a._v(" "),r("h2",{attrs:{id:"接口与抽象类的区别？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#接口与抽象类的区别？"}},[a._v("#")]),a._v(" 接口与抽象类的区别？")]),a._v(" "),r("p",[a._v("接口是一种约定，实现接口的类要遵循这个约定；\n抽象类本质上是一个类，使用抽象类的代价要比接口大。")]),a._v(" "),r("h2",{attrs:{id:"接口与抽象类的区别？-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#接口与抽象类的区别？-2"}},[a._v("#")]),a._v(" 接口与抽象类的区别？")]),a._v(" "),r("p",[a._v("抽象类中可以包含属性，方法（包含抽象方法与有着具体实现的方法），常量接口只能包含常量和方法声明。\n抽象类中的方法和成员变量可以定义可见性（比如 public、private等）而接口中的方法只能为public（缺省为public）\n一个子类只能有一个父类（具体类或抽象类）而一个接口可以继承一个多个接口，一个类也可以实现多个接口。\n子类中实现父类中的抽象方法时，可见性可以大于等于父类中的，而接口实现类中的接口 方法的可见性只能与接口中相同（public）")]),a._v(" "),r("h2",{attrs:{id:"静态内部类与非静态内部类的区别？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#静态内部类与非静态内部类的区别？"}},[a._v("#")]),a._v(" 静态内部类与非静态内部类的区别？")]),a._v(" "),r("p",[a._v("静态内部类不会持有外围类的引用，而非静态内部类会隐式持有外围类的一个引用。")]),a._v(" "),r("h2",{attrs:{id:"java中多态的实现原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java中多态的实现原理"}},[a._v("#")]),a._v(" Java中多态的实现原理")])])}),[],!1,null,null,null);t.default=s.exports}}]);