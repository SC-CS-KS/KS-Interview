(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{283:function(t,a,r){"use strict";r.r(a);var s=r(28),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"性能优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[t._v("#")]),t._v(" 性能优化")]),t._v(" "),r("h2",{attrs:{id:"高并发、任务执行时间短的业务怎样使用线程池？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#高并发、任务执行时间短的业务怎样使用线程池？"}},[t._v("#")]),t._v(" 高并发、任务执行时间短的业务怎样使用线程池？")]),t._v(" "),r("p",[t._v("线程池线程数可以设置为CPU核数+1，减少线程上下文的切换。")]),t._v(" "),r("h2",{attrs:{id:"并发不高、任务执行时间长的业务怎样使用线程池？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#并发不高、任务执行时间长的业务怎样使用线程池？"}},[t._v("#")]),t._v(" 并发不高、任务执行时间长的业务怎样使用线程池？")]),t._v(" "),r("ul",[r("li",[t._v("IO密集型的任务")])]),t._v(" "),r("p",[t._v("因为IO操作并不占用CPU，所以不要让所有的CPU闲下来。"),r("br"),t._v("\n可以加大线程池中的线程数目，让CPU处理更多的业务。")]),t._v(" "),r("ul",[r("li",[t._v("计算密集型任务")])]),t._v(" "),r("p",[t._v("这个就没办法了，和（1）一样吧，线程池中的线程数设置得少一些，减少线程上下文的切换。")]),t._v(" "),r("h2",{attrs:{id:"并发高、业务执行时间长的业务怎样使用线程池？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#并发高、业务执行时间长的业务怎样使用线程池？"}},[t._v("#")]),t._v(" 并发高、业务执行时间长的业务怎样使用线程池？")]),t._v(" "),r("p",[t._v("解决这种类型任务的关键不在于线程池而在于整体架构的设计。"),r("br"),t._v("\n看看这些业务里面某些数据是否能做缓存是第一步，增加服务器是第二步。"),r("br"),t._v("\n业务执行时间长的问题，也可能需要分析一下，看看能不能使用中间件对任务进行拆分和解耦。")])])}),[],!1,null,null,null);a.default=e.exports}}]);