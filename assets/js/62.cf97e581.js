(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{306:function(a,t,s){"use strict";s.r(t);var r=s(28),v=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[a._v("#")]),a._v(" 测试")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("测试思路和测试策略\n"),s("strong",[a._v("考察点：")]),a._v("\n（1）测试的全面性、有效性，思路是否经过充分的思考，思维是否系统、完整、活跃，甚至有惊喜。")]),a._v(" "),s("p",[s("strong",[a._v("问题")]),a._v("\n（1）给一个业务场景、或者一段代码，怎么去测试？\n注意：此题的难度由给定的场景复杂度、代码的难易程度决定。")])]),a._v(" "),s("li",[s("p",[a._v("自动化测试")])]),a._v(" "),s("li",[s("p",[a._v("客户端测试")])]),a._v(" "),s("li",[s("p",[a._v("接口测试")])]),a._v(" "),s("li",[s("p",[a._v("稳定性测试")])]),a._v(" "),s("li",[s("p",[a._v("性能测试\n（1）【易】什么时候需要性能测试？\n（2）【中】性能测试的要点？难点？\n（3）【易】性能测试实施的步骤？\n（4）【易】性能测试评估的指标有哪些？\n（5）【难】CPU、内存、网卡资源未耗尽，但是 QPS 无法提升，可能原因是什么？\n（6）【难】加压工具并发数、服务端连接数、线程数对性能测试的影响是什么？")])])]),a._v(" "),s("h1",{attrs:{id:"项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#项目"}},[a._v("#")]),a._v(" 项目")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("项目的经历\n多问为什么？才能确认候选人实际对项目的贡献程度。")]),a._v(" "),s("p",[a._v("可以问一些开发性问题，如：\n项目过程中，碰到的最大的困难是什么？怎么解决的？\n项目又哪些失败的实践，怎么总结教训？\n项目有哪些做到不好的地方？有什么样的思考，来优化？")])]),a._v(" "),s("li",[s("p",[a._v("项目的推动力\n怎么识别项目中的风险？怎么应对？\n项目测试过程中碰到哪些困难？怎么解决？")])]),a._v(" "),s("li",[s("p",[a._v("思考和总结的能力")])]),a._v(" "),s("li",[s("p",[a._v("团队协作能力")])])]),a._v(" "),s("h1",{attrs:{id:"计算机基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算机基础"}},[a._v("#")]),a._v(" 计算机基础")]),a._v(" "),s("h2",{attrs:{id:"网络"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络"}},[a._v("#")]),a._v(" 网络")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("TCP/IP 模型\n（1）TCP 通过握手建立连接。")])]),a._v(" "),s("li",[s("p",[a._v("IO 原理\n（1）异步IO 和同步IO 区别\n（2）什么是IO复用")])])]),a._v(" "),s("h2",{attrs:{id:"进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[a._v("#")]),a._v(" 进程")]),a._v(" "),s("h2",{attrs:{id:"web"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#web"}},[a._v("#")]),a._v(" Web")]),a._v(" "),s("h2",{attrs:{id:"http"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[a._v("#")]),a._v(" HTTP")]),a._v(" "),s("ul",[s("li",[a._v("HTTPS 与 HTTP的区别，HTTPS的实现原理")]),a._v(" "),s("li",[a._v("POST 与 PUT 方法区别？")]),a._v(" "),s("li",[a._v("HTTP 幂等性\nHTTP方法的幂等性是指一次和多次请求某一个资源应该具有同样的副作用。\n所以除POST、PATCH不满足幂等，HEAD，GET，OPTIONS，DELETE，PUT满足幂等。")])]),a._v(" "),s("h1",{attrs:{id:"编程思想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编程思想"}},[a._v("#")]),a._v(" 编程思想")]),a._v(" "),s("h2",{attrs:{id:"oop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oop"}},[a._v("#")]),a._v(" OOP")]),a._v(" "),s("ul",[s("li",[a._v("三大特征")]),a._v(" "),s("li",[a._v("Override, Overload的含义与区别")]),a._v(" "),s("li",[a._v("接口与抽象类的区别")]),a._v(" "),s("li",[a._v("接口与抽象类的对比")]),a._v(" "),s("li",[a._v("静态内部类与非静态内部类的区别")]),a._v(" "),s("li",[a._v("Java中多态的实现原理")])]),a._v(" "),s("h1",{attrs:{id:"代码能力"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码能力"}},[a._v("#")]),a._v(" 代码能力")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("能看懂代码")])]),a._v(" "),s("li",[s("p",[a._v("找到代码里的bug")])]),a._v(" "),s("li",[s("p",[a._v("怎么修复发现的bug")])]),a._v(" "),s("li",[s("p",[a._v("写一段代码\n【易】"),s("strong",[a._v("Fizz Buzz问题")]),a._v("\n给你一个整数n. 从 1 到 n 按照下面的规则打印每个数：\n如果这个数被3整除，打印fizz，\n如果这个数被5整除，打印buzz，\n如果这个数能同时被3和5整除，打印fizz buzz。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v(' 样例： \n n = 15 ，返回一个字符串数组：\n [\n \t"1", "2", "fizz",\n \t"4", "buzz", "fizz",\n \t"7", "8", "fizz",\n \t"buzz", "11", "fizz",\n \t"13", "14", "fizz buzz"\n ]\n \n 考察点：\n Fizz Buzz问题 属于基础中的基础，大概能分辨出候选人有没有写过代码。\n 由于比较简单，所以基本两三分钟解决问题，如果不是，说明代码不熟。\n')])])]),s("p",[s("strong",[a._v("【中】实现两个 字符串小数的加法")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v(' 样例： \n Input: "123.7899" "2321.233"\n Output: "2445.0229"\n')])])]),s("p",[s("strong",[a._v("【中】int 类型数 反转")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v(" 样例： \n Input: 123 Output: 321\n")])])]),s("p",[s("strong",[a._v("【难】字符串转换为整型")]),a._v("\n要求如果字面意思是一个整型数，则正常转换，否则返回失败或抛出异常。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v(" 考察点：\n a. 整数的正负问题\n b. 整数的大小问题，可能会溢出，怎么判断？如果溢出了，怎么处理？\n c. 字符串左侧是一串0开始，怎么处理？\n\n 注：\n 这个题目作为代码题考察看似很简单，但如果从测试的角度看，要保证完备是很难的，\n 我面试的候选人到目前为止没有人能完全回答完整。\n")])])])]),a._v(" "),s("li",[s("p",[a._v("写Unit Test Case\n单元测试一般要依赖代码实现的语言，可以放在写代码之后考察。\n针对候选人写的代码要求，写相应的单元测试。")])])]),a._v(" "),s("h1",{attrs:{id:"算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[a._v("#")]),a._v(" 算法")]),a._v(" "),s("p",[a._v("对于QA同学来说，算法能不能实际的写出来，我觉得不是最重要，重要的是考虑问题的思维方式。")]),a._v(" "),s("p",[s("strong",[a._v("考察点：")]),a._v("\n（1）算法不要拘泥于教科书上的实现，重点考察思路，考察候选人的计算机思维。\n（2）需要采用渐进的方式引导候选人。\n（3）考察算法的优化思想，这个比较难，视候选人情况而定。\n（3）算法思路可以结合测试思路进行考察，如候选人完成算法的考察后，可以问怎么测试？\n这样会有很好的衔接。")]),a._v(" "),s("p",[a._v("如：快速排序\n可以问，快速排序 为什么会快（相对于其他排序方式）？是否在任何情况下都快？\n如果不是，是否可以列举一种最坏的场景？怎么去优化才能保证没有最近情况？\n以上问题都是越来越难，能大致判断出候选人所能达到的层级。")]),a._v(" "),s("p",[s("strong",[a._v("问题")]),a._v("\n【易】【链表】实现单链表反转\n【易】【链表】实现两个有序的链表合并为一个有序链表\n【中】【链表】删除链表的倒数第N个节点，要求一次遍历完成。（快慢指针）\n【易】【递归】编程实现求阶乘n!\n【难】【综合】编程实现一组数据集合的全排列\n难点在于这个题目实际上至少有三种思路。\n【难】【Top K】编程实现O(n)时间复杂度内找到一组数据的第K大元素")]),a._v(" "),s("h1",{attrs:{id:"java"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[a._v("#")]),a._v(" Java")]),a._v(" "),s("h2",{attrs:{id:"语言基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语言基础"}},[a._v("#")]),a._v(" 语言基础")]),a._v(" "),s("h2",{attrs:{id:"线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[a._v("#")]),a._v(" 线程")]),a._v(" "),s("p",[a._v("【易】使用99个线程，顺序打印1到99。\n考察 Java 多线程编程，可以进一步问怎么提升并发度。")]),a._v(" "),s("h2",{attrs:{id:"jvm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[a._v("#")]),a._v(" JVM")]),a._v(" "),s("h3",{attrs:{id:"内存模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存模型"}},[a._v("#")]),a._v(" 内存模型")]),a._v(" "),s("h3",{attrs:{id:"gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc"}},[a._v("#")]),a._v(" GC")]),a._v(" "),s("h2",{attrs:{id:"spring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[a._v("#")]),a._v(" Spring")]),a._v(" "),s("p",[a._v("【易】AOP 和 IoC 的原理")]),a._v(" "),s("h2",{attrs:{id:"orm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#orm"}},[a._v("#")]),a._v(" ORM")]),a._v(" "),s("h1",{attrs:{id:"python"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python"}},[a._v("#")]),a._v(" Python")]),a._v(" "),s("h1",{attrs:{id:"数据库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据库"}},[a._v("#")]),a._v(" 数据库")]),a._v(" "),s("p",[a._v("什么是事务？事务的特性（ACID）？")]),a._v(" "),s("h2",{attrs:{id:"mysql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql"}},[a._v("#")]),a._v(" MySQL")]),a._v(" "),s("ul",[s("li",[a._v("数据常用存储方式？ 顺序存储和链式存储")]),a._v(" "),s("li",[a._v("怎样在 MySQL 表中存储树形结构数据？")]),a._v(" "),s("li",[a._v("事务有时候需要手动提交，容易忘记，Java代码使用什么方式可以实现自动提交（commit）？")]),a._v(" "),s("li",[a._v("如何处理RollBack？try-with-resource？")]),a._v(" "),s("li",[a._v("mysql如果一个事务一直没有commit并且也没有rollback会怎样？")]),a._v(" "),s("li",[a._v("索引实现原理？")]),a._v(" "),s("li",[a._v("为什么文件存储要选用B+树这样的数据结构？")]),a._v(" "),s("li",[a._v("MySQL为什么选取B+树作为存储结构？")])]),a._v(" "),s("p",[a._v("【中】下面这段SQL用户实现转账操作，是否存在问题?")]),a._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("start")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("transaction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("update")]),a._v(" from_account "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("set")]),a._v(" balance "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" balance "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("500")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v(" user_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("9527")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("update")]),a._v(" to_account "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("set")]),a._v(" balance "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" balance "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("500")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v(" user_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("9588")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("commit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("考察如何实现事务的一致性。")]),a._v(" "),s("h1",{attrs:{id:"shell"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shell"}},[a._v("#")]),a._v(" Shell")]),a._v(" "),s("h2",{attrs:{id:"命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令"}},[a._v("#")]),a._v(" 命令")]),a._v(" "),s("h1",{attrs:{id:"linux"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux"}},[a._v("#")]),a._v(" Linux")]),a._v(" "),s("h1",{attrs:{id:"开放性问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开放性问题"}},[a._v("#")]),a._v(" 开放性问题")])])}),[],!1,null,null,null);t.default=v.exports}}]);