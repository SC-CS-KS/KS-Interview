(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{288:function(e,r,o){"use strict";o.r(r);var a=o(28),t=Object(a.a)({},(function(){var e=this,r=e.$createElement,o=e._self._c||r;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"thread-pool"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#thread-pool"}},[e._v("#")]),e._v(" Thread Pool")]),e._v(" "),o("h2",{attrs:{id:"为什么要使用线程池？"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用线程池？"}},[e._v("#")]),e._v(" 为什么要使用线程池？")]),e._v(" "),o("ol",[o("li",[e._v("避免频繁地创建和销毁线程，达到线程对象的重用。")]),e._v(" "),o("li",[e._v("使用线程池还可以根据项目灵活地控制并发的数目。")])]),e._v(" "),o("h2",{attrs:{id:"线程池的用法"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#线程池的用法"}},[e._v("#")]),e._v(" 线程池的用法")]),e._v(" "),o("p",[e._v("可以调用ThreadPoolExecutor的某个构造方法来自己创建一个线程池。")]),e._v(" "),o("p",[e._v("但通常情况下我们可以使用Executors类提供给我们的静态工厂方法来更方便的创建一个线程池对象。")]),e._v(" "),o("p",[e._v("建了线程池对象后，我们就可以调用submit方法提交任务到线程池中去执行了，"),o("br"),e._v("\n线程池使用完毕后我们要记得调用shutdown方法来关闭它。")]),e._v(" "),o("h2",{attrs:{id:"线程池的实现"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#线程池的实现"}},[e._v("#")]),e._v(" 线程池的实现")]),e._v(" "),o("p",[e._v("ThreadPoolExecutor 继承自 AbstractExecutorService 实现了 ExecutorService 接口。"),o("br"),e._v("\nScheduledThreadPoolExecutor 继承自 ThreadPoolExecutor 实现了 ExecutorService 和 ScheduledExecutorService 接口。")]),e._v(" "),o("p",[e._v("有多个构造方法，最终都指向这个最多参数的构造方法：")]),e._v(" "),o("ul",[o("li",[o("p",[e._v("corePoolSize"),o("br"),e._v("\n核心运行的线程个数，也就是当超过这个范围的时候就需要将新的异步任务放入到等待队列中，"),o("br"),e._v("\n小于这个数时添加进来的异步任务一般直接新建Thread 执行。")])]),e._v(" "),o("li",[o("p",[e._v("maximumPoolSize\n最大线程个数，当大于了这个值就会将准备新加的异步任务由一个丢弃处理机制来处理。"),o("br"),e._v("\n大于 corePoolSize 且小于 maximumPoolSize 则新建 Thread 执行。"),o("br"),e._v("\n但是当通过newFixedThreadPool 创建的时候，corePoolSize 和 maximumPoolSize 是一样的，"),o("br"),e._v("\n而corePoolSize 是先执行的，所以他会先被放入等待队列而不会执行到下面的丢弃处理中。")])]),e._v(" "),o("li",[o("p",[e._v("workQueue"),o("br"),e._v("\n任务等待队列，当达到 corePoolSize的时候就向该等待队列放入线程信息（默认为一个LinkedBlockingQueue）。")])]),e._v(" "),o("li",[o("p",[e._v("keepAliveTime\n默认是 0，当线程没有任务处理后空闲线程保持多长时间，不推荐使用；")])]),e._v(" "),o("li",[o("p",[e._v("threadFactory\n是构造 Thread 的方法，一个接口类，可以使用默认的 default实现，也可以自己去包装和传递，主要实现 newThread 方法即可；")])]),e._v(" "),o("li",[o("p",[e._v("defaultHandler\n当参数 maximumPoolSize 达到后丢弃处理的方法实现，java 提供了 5种丢弃处理的方法。")])])]),e._v(" "),o("h2",{attrs:{id:"如果你提交任务时，线程池队列已满，这时会发生什么？"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#如果你提交任务时，线程池队列已满，这时会发生什么？"}},[e._v("#")]),e._v(" 如果你提交任务时，线程池队列已满，这时会发生什么？")]),e._v(" "),o("p",[e._v("如果使用的是无界队列LinkedBlockingQueue，继续添加任务到阻塞队列中等待执行。")]),e._v(" "),o("p",[e._v("如果使用的是有界队列比如ArrayBlockingQueue，"),o("br"),e._v("\n任务首先会被添加到ArrayBlockingQueue中，ArrayBlockingQueue满了，会根据maximumPoolSize的值增加线程数量。"),o("br"),e._v("\n如果增加了线程数量还是处理不过来，ArrayBlockingQueue继续满，"),o("br"),e._v("\n那么则会使用拒绝策略RejectedExecutionHandler处理满了的任务，默认是AbortPolicy。")])])}),[],!1,null,null,null);r.default=t.exports}}]);